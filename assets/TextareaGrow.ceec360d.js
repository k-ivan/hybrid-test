import{o as e,c as t,w as s}from"./vendor.b1a999a8.js";const i={name:"TextareaGrow",props:{rows:{type:[String,Number],default:1},modelValue:{type:String,default:""},maxHeight:{type:Number,default:0}},emits:["update:modelValue"],watch:{async value(e){0===e.length&&(await this.$nextTick(),this.resize())}},mounted(){this.initialWidth=this.$el.offsetWidth,this.offset=this.getOffset(this.$el),this.$el.style.overflowY="hidden",this.resize(),window.addEventListener("resize",this.resize)},beforeUnmount(){window.removeEventListener("resize",this.resize)},methods:{resize(){this.maxHeight&&this.$el.scrollHeight+this.offset>this.maxHeight?(this.$el.style.overflowY="scroll",this.newHeight=this.maxHeight):(this.$el.style.overflowY="hidden",this.$el.style.height="auto",this.newHeight=this.$el.scrollHeight+this.offset),this.$el.style.height=`${this.newHeight}px`},async handleInput(e){this.$emit("update:modelValue",e.target.value),this.resize()},getOffset(e){const{borderTopWidth:t,borderBottomWidth:s}=window.getComputedStyle(e,null);let i=parseFloat(t)+parseFloat(s);return isNaN(i)&&(i=0),i}}},h=s()(((s,i,h,l,a,o)=>(e(),t("textarea",{class:"textarea-grow",rows:h.rows,value:h.modelValue,onInput:i[1]||(i[1]=(...e)=>o.handleInput&&o.handleInput(...e))},null,40,["rows","value"]))));i.render=h,i.__scopeId="data-v-f78592dc";export{i as _};
